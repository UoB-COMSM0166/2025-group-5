@startuml
skinparam classAttributeIconSize 0
class SpriteAnimator {
    - currentIndex
    - currentState
    - finished
    - frameSets
    - lastSwitch
    --
    + constructor()
    + draw()
    + if()
    + isFinished()
    + reset()
    + setState()
    + update()
}
class Character {
    - abnormalStatus
    - abnormalTimer
    - animationFlag
    - animator
    - attack
    - attackCdTimer
    - format
    - health
    - invincibleTimer
    - maxHealth
    - size
    - speed
    - state
    - status
    - x
    - y
    --
    + changeAttack()
    + changeFormat()
    + changeHealth()
    + changeStatus()
    + constructor()
    + display()
    + drawHealthBar()
    + getAttack()
    + getHealth()
    + getSize()
    + getStatus()
    + get_x_position()
    + get_y_position()
    + if()
    + set_x_position()
    + set_y_position()
}
class Curtain {
    - format
    - h
    - lastDirection
    - px
    - py
    - radius
    - sectorRadius
    - shape
    - w
    --
    + constructor()
    + display()
    + for()
    + if()
    + switch()
    + update()
}
class Enemy {
    - abnormalStatus
    - abnormalTimer
    - attackCdTimer
    - attackRange
    - cd
    - enemyId
    - enemyType
    - factCd
    - factSpeed
    - findPalyer
    - invincibleTimer
    - nextPatroIndex
    - nextPatrolPoint
    - patrolPath
    - prevX
    - prevY
    - projectiles
    - shootDis
    - shootFormat
    - shootSize
    - shootSpeed
    - skill
    - speed
    - state
    - status
    - visionType
    - warningRange
    - x
    - y
    --
    + abnormalTimerUpdate()
    + attackCdUpdate()
    + changeAbnormalStatus()
    + constructor()
    + doAttack()
    + enemyMove()
    + fireEffect()
    + for()
    + getEnemyId()
    + if()
    + invincibleTimerUpdate()
    + isFindPlayer()
    + isGetPoint()
    + stateUpdate()
    + undoMove()
    + update()
}
class Entity {
    - condition
    - expireAfterTriggered
    - isPassable
    - matchedResult
    - triggerDis
    - triggerableFlag
    - type
    - unmatchedResult
    --
    + constructor()
    + display()
    + for()
    + if()
    + isMatched()
    + update()
}
class Level {
    - bGTexture
    - bg
    - conf
    - curtain
    - curtainFlag
    - endAnimation
    - endFlag
    - endMaxTimer
    - endTimer
    - enemies
    - entities
    - id
    - isSpecial
    - jsonData
    - jsonFile
    - light
    - lightTexture
    - number
    - obstacles
    - player
    - prompt
    - promptFlag
    - skillBar
    - startAnimation
    - startMaxTimer
    - startTimer
    - tempPlayer
    - transformFlag
    --
    + checkCollisions()
    + constructor()
    + createEnemies()
    + createEntities()
    + createObstacles()
    + drawBG()
    + drawCurtain()
    + drawEnemies()
    + drawEntities()
    + drawLight()
    + drawObstacles()
    + drawProjectiles()
    + drawWithoutUpdate()
    + for()
    + if()
    + isPlayerInGrass()
    + keyPressedInLevel()
    + reset()
    + start()
    + update()
}
class Music {
    - bgMusic
    - sfx
    --
    + constructor()
    + if()
    + playBackground()
    + playSFX()
    + stopBackground()
}
class Obstacle {
    - isPassable
    --
    + constructor()
}
class Player {
    - abnormalStatus
    - abnormalTimer
    - attackCdTimer
    - attackRange
    - cd
    - factCd
    - factSpeed
    - inv
    - invincibleTimer
    - lastDirection
    - playerType
    - prevX
    - prevY
    - projectiles
    - shootDis
    - shootFormat
    - shootSize
    - shootSpeed
    - skill
    - speed
    - state
    - status
    - visionType
    - warningRange
    - x
    - y
    --
    + abnormalTimerUpdate()
    + aoe()
    + attackCdUpdate()
    + changeAbnormalStatus()
    + constructor()
    + fireEffect()
    + for()
    + if()
    + shoot()
    + stateUpdate()
    + switch()
    + undoMove()
    + update()
}
class Projectile {
    - dx
    - dy
    - format
    - maxDistance
    - size
    - skill
    - speed
    - startX
    - startY
    - x
    - y
    --
    + constructor()
    + display()
    + if()
    + isHit()
    + isVisible()
    + update()
}
class Prompt {
    - format
    - frameWidth
    - frameheight
    - height
    - maxTimer
    - text
    - timer
    - width
    - x
    - y
    --
    + constructor()
    + display()
    + updateText()
}
class SkillBar {
    - blankwidth
    - height
    - lockedTexture
    - numberList
    - skillNum
    - statusList
    - textSize
    - textureList
    - width
    - x
    - y
    --
    + addSkill()
    + constructor()
    + display()
    + for()
    + if()
    + useSkill()
}
Character <|-- Enemy
Character <|-- Entity
Character <|-- Obstacle
Character <|-- Player
@enduml